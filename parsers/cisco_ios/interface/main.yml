- name: interface
  tags:
  - interface
  matches:
  - name: interface
    template: interface/default.j2
    lines:
    - regex: '^interface (\S+)$'
      examples:
      - 'interface GigabitEthernet0/6'
      captures:
      - name
      path:
        interfaces:
          "{{ name }}":
            name: "\"{{ name }}\""
      lines:
      - regex: '^\s*description (.*)$'
        examples:
        - 'description My interface description'
        captures:
        - description
        path:
          interfaces:
            "{{ name }}":
              description: "\"{{ description }}\""
      - regex: '^\s*switchport access vlan (\d{1,4})$'
        examples:
        - ' switchport access vlan 900'
        captures:
        - vlan
        path:
          interfaces:
            "{{ name }}":
              switchport:
                access:
                  vlan: "{{ vlan }}"
      - regex: '^\s*switchport trunk encapsulation (\w+)$'
        examples:
        - ' switchport trunk encapsulation dot1q'
        captures:
        - switchport_trunk_encapsulation
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  encapsulation: "{{ switchport_trunk_encapsulation }}"
      - regex: '^\s*switchport trunk native vlan (\d{1,4})$'
        examples:
        - ' switchport trunk native vlan 5'
        captures:
        - vlan
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  native_vlan: "{{ vlan }}"
      - regex: '^\s*switchport trunk allowed vlan (?!(add))(.*)$'
        examples:
        - 'switchport trunk allowed vlan 1,2,903-905'
        captures:
        - not add
        - vlans
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  allowed_vlans:
                    vlans: "\"{{ vlans }}\""
      - regex: '^\s*switchport trunk allowed vlan add (.*)$'
        examples:
        - ' switchport trunk allowed vlan add 1002-1005'
        captures:
        - vlans
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  allowed_vlans:
                    add: "\"{{ vlans }}\""
      - regex: '^\s*switchport mode (.*)$'
        examples:
        - ' switchport mode trunk'
        captures:
        - mode
        path:
          interfaces:
            "{{ name }}":
              switchport:
                mode: "{{ mode.split() }}"
      - regex: '^\s*channel-group (\d{1,3}) mode (.*)$'
        examples:
        - ' channel-group 1 mode desirable'
        captures:
        - channel_group
        - channel_group_mode
        path:
          interfaces:
            "{{ name }}":
              channel_group: "{{ channel_group }}"
              channel_group_mode: "{{ channel_group_mode.split() }}"
      - regex: '^\s*no switchport$'
        examples:
        - ' no switchport'
        path:
          interfaces:
            "{{ name }}":
              switchport:
                negate: True
      - regex: '^\s*bandwidth (.*)$'
        examples:
        - ' bandwidth 10000'
        captures:
        - bandwidth
        path:
          interfaces:
            "{{ name }}":
              bandwidth:
              - "{{ bandwidth }}"
      - regex: '^\s*ip address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' ip address 10.250.100.1 255.255.255.0'
        captures:
        - ipv4_address
        - ipv4_netmask
        path:
          interfaces:
            "{{ name }}":
              ip:
                address:
                  ipv4_address: "{{ ipv4_address }}"
                  ipv4_netmask: "{{ ipv4_netmask }}"
      - regex: '^\s*no ip address$'
        examples:
        - ' no ip address'
        path:
          interfaces:
            "{{ name }}":
              ip:
                address:
                  negate: True
      - regex: '^\s*ip vrf forwarding (\S+)$'
        examples:
          - ' ip vrf forwarding vrf100'
        captures:
        - vrf
        path:
          interfaces:
            "{{ name }}":
              vrf: "{{ vrf }}"
      - regex: '^\s*ip directed-broadcast$'
        examples:
        -  ' ip directed-broadcast'
        path:
          interfaces:
            "{{ name }}":
              ip:
                directed_broadcast: True
      - regex: '^\s*ip directed-broadcast (\d+)$'
        examples:
        -  ' ip directed-broadcast 123'
        captures:
          - acl
        path:
          interfaces:
            "{{ name }}":
              ip:
                directed_broadcast: "{{ acl }}"
      - regex: '^\s*no ip redirects$'
        examples:
        -  ' no ip redirects'
        path:
          interfaces:
            "{{ name }}":
              ip:
                redirects:
                  negate: true
      - regex: '^\s*no ip unreachables$'
        examples:
        -  ' no ip unreachables'
        path:
          interfaces:
            "{{ name }}":
              ip:
                unreachables:
                  negate: true
      - regex: '^\s*no ip proxy-arp$'
        examples:
        -  ' no ip proxy-arp'
        path:
          interfaces:
            "{{ name }}":
              ip:
                proxy_arp:
                  negate: True
      - regex: '^\s*ip mtu (\d+)$'
        examples:
        - ' ip mtu 1300'
        captures:
        - mtu
        path:
          interfaces:
            "{{ name }}":
              ip:
                mtu: "{{ mtu }}"
      - regex: '^\s*ip access-group (\S+) (in|out)$'
        examples:
        - ' ip access-group internet->in in'
        captures:
        - access_group_name
        - access_group_direction
        path:
          interfaces:
            "{{ name }}":
              ip:
                access_groups:
                - name: "{{ access_group_name }}"
                  direction: "{{ access_group_direction }}"
      - regex: '^\s*ip nbar protocol-discovery$'
        examples:
        -  ' ip nbar protocol-discovery'
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  protocol_discovery: true
      - regex: '^\s*ip flow (\S+)$'
        examples:
        - ' ip flow ingress'
        captures:
        - flow_direction
        path:
          interfaces:
            "{{ name }}":
              ip:
                flow:
                  directions:
                  - "{{ flow_direction }}"
      - regex: '^\s*ip nhrp map multicast dynamic$'
        examples:
        -  ' ip nhrp map multicast dynamic'
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  map:
                    multicast:
                      dynamic: true
      - regex: '^\s*ip nhrp map (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        -  ' ip nhrp map 10.10.10.1 83.100.100.100'
        captures:
        - nhrp_ip_address
        - nhrp_nbma_address
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  map:
                    ip_address: "{{ nhrp_ip_address }}"
                    nbma_address: "{{ nhrp_nbma_address }}"
      - regex: '^\s*ip nhrp map multicast (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        -  ' ip nhrp map multicast 83.100.100.100'
        captures:
        - nhrp_multicast_nbma_address
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  map:
                    multicast:
                      nbma_address: "{{ nhrp_multicast_nbma_address }}"
      - regex: '^\s*ip nhrp network-id (\d+)$'
        examples:
        -  ' ip nhrp network-id 10'
        captures:
        - nhrp_network_id
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  network_id: "{{ nhrp_network_id }}"
      - regex: '^\s*ip nhrp holdtime (\d+)$'
        examples:
        -  ' ip nhrp network-id 10'
        captures:
        - nhrp_holdtime
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  holdtime: "{{ nhrp_holdtime }}"
      - regex: '^\s*ip nhrp nhs (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        -  ' ip nhrp nhs 10.69.254.129'
        captures:
        - nhrp_nhs
        path:
          interfaces:
            "{{ name }}":
              ip:
                nbar:
                  nhs: "{{ nhrp_nhs }}"
      - regex: '^\s+ip tcp adjust-mss (\d+)$'
        examples:
        - ' ip tcp adjust-mss 1260'
        captures:
        - tcp_adjust_mss
        path:
          interfaces:
            "{{ name }}":
              ip:
                tcp:
                  adjust_mss: "{{ tcp_adjust_mss }}"
      - regex: '^\s+ip ospf network (\S+)$'
        examples:
        - ' ip ospf network point-to-point'
        captures:
        - ospf_network
        path:
          interfaces:
            "{{ name }}":
              ip:
                ospf:
                  network_type: "{{ ospf_network }}"
      - regex: '^\s+ip ospf hello-interval (\d+)$'
        examples:
        - ' ip ospf hello-interval 30'
        captures:
        - ospf_hello_interval
        path:
          interfaces:
            "{{ name }}":
              ip:
                ospf:
                  hello_interval: "{{ ospf_hello_interval }}"
      - regex: '^\s*ip helper-address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' ip helper-address 10.1.1.90'
        captures:
        - ipv4_helper_address
        path:
          interfaces:
            "{{ name }}":
              ip:
                helper_addresses:
                - ipv4_helper_address: "{{ ipv4_helper_address }}"
      - regex: '^\s*ip route-cache (\w+)$'
        examples:
        - ' ip route-cache policy'
        captures:
        - route_cache
        path:
          interfaces:
            "{{ name }}":
              ip:
                route_cache: "{{ route_cache }}"
      - regex: '^\s*ip policy route-map (\S+)$'
        examples:
        - ' ip policy route-map foo-test'
        captures:
        - policy_route_map
        path:
          interfaces:
            "{{ name }}":
              ip:
                policy_route_map: "{{ policy_route_map }}"
      - regex: '\s*mac-address (.+)$'
        examples:
          - " mac-address 0000.1234.ffff"
        captures:
          - mac
        path:
          interfaces:
            "{{ name }}":
              mac: "{{ mac }}"
      - regex: '^\s*shutdown$'
        examples:
        - ' shutdown'
        path:
          interfaces:
            "{{ name }}":
              shutdown: True
      - regex: '^\s*tunnel source (\S+)$'
        examples:
        - ' tunnel source GigabitEthernet0/2'
        captures:
        - tunnel_source
        path:
          interfaces:
            "{{ name }}":
              tunnel:
                source: "{{ tunnel_source }}"
      - regex: '^\s*tunnel mode (.*)$'
        examples:
        - ' tunnel mode gre multipoint'
        captures:
        - tunnel_mode
        path:
          interfaces:
            "{{ name }}":
              tunnel:
                mode: "{{ tunnel_mode }}"
      - regex: '^\s*tunnel key (\S+)$'
        examples:
        - ' tunnel key 10'
        captures:
        - tunnel_key
        path:
          interfaces:
            "{{ name }}":
              tunnel:
                key: "{{ tunnel_key }}"
      - regex: '^\s*tunnel path-mtu-discovery$'
        examples:
        - ' tunnel path-mtu-discovery'
        path:
          interfaces:
            "{{ name }}":
              tunnel:
                path_mtu_discovery: true
      - regex: '^\s*tunnel protection ipsec profile (\S+) shared$'
        examples:
        - ' tunnel protection ipsec profile emea-dmvpn-ipsec shared'
        captures:
        - tunnel_ipsec_profile_name
        path:
          interfaces:
            "{{ name }}":
              tunnel:
                protection:
                  ipsec_profile: "{{ tunnel_ipsec_profile_name }}"
                  shared: true
      - regex: '^\s*encapsulation (\S+)$'
        examples:
        - ' encapsulation hdlc'
        captures:
        - encapsulation
        path:
          interfaces:
            "{{ name }}":
              encapsulation:
                protocol: "{{ encapsulation }}"
      - regex: '^\s*isdn (.*)$'
        examples:
        - ' isdn foo'
        captures:
        - isdn
        path:
          interfaces:
            "{{ name }}":
              isdn:
              - "{{ isdn }}"
      - regex: '^\s*speed (.*)$'
        examples:
        - ' speed auto'
        captures:
        - speed
        path:
          interfaces:
            "{{ name }}":
              speed: "{{ speed }}"
      - regex: '^\s*duplex (.*)$'
        examples:
        - ' duplex auto'
        captures:
        - duplex
        path:
          interfaces:
            "{{ name }}":
              duplex: "{{ duplex }}"
      - regex: '^\s*media-type (\S+)$'
        examples:
        - ' media-type rj45'
        captures:
        - media_type
        path:
          interfaces:
            "{{ name }}":
              media_type: "{{ media_type }}"
      - regex: '^\s*ip nat (\w+)$'
        examples:
        - ' ip nat outside'
        captures:
        - nat_side
        path:
          interfaces:
            "{{ name }}":
              ip:
                nat:
                  side: "{{ nat_side }}"
      - regex: '^\s*ip inspect (\S+) (\w+)$'
        examples:
        -  ' ip inspect internetegress out'
        captures:
        - inspection_name
        - inspection_direction
        path:
          interfaces:
            "{{ name }}":
              ip:
                inspect:
                  name: "{{ inspection_name }}"
                  direction: "{{ inspection_direction }}"
      - regex: '^\s*ip virtual-reassembly (\w+)$'
        examples:
        -   ' ip virtual-reassembly in'
        captures:
        - virtual_reassembly_direction
        path:
          interfaces:
            "{{ name }}":
              ip:
                virtual_reassembly:
                  direction: "{{ virtual_reassembly_direction }}"
      - regex: '^\s*no ip virtual-reassembly (\w+)$'
        examples:
        -   ' no ip virtual-reassembly in'
        captures:
        - virtual_reassembly_direction
        path:
          interfaces:
            "{{ name }}":
              ip:
                virtual_reassembly:
                  direction: "{{ virtual_reassembly_direction }}"
                  negate: true
      - regex: '^\s*ip ospf authentication-key (\d) (\S+)$'
        examples:
        -   ' ip ospf authentication-key 7 075F655C4820375623'
        captures:
        - ospf_authentication_key_encryption_type
        - ospf_authentication_key_encryption_key
        path:
          interfaces:
            "{{ name }}":
              ip:
                ospf:
                  encryption_type: "{{ ospf_authentication_key_encryption_type }}"
                  authentication_key: "{{ ospf_authentication_key_encryption_key }}"
      - regex: '^\s*service-policy (input|output) (\S+)'
        examples:
        - ' service-policy input qo-global-core-ingress-lan'
        captures:
        - service_policy_direction
        - service_policy_name
        path:
          interfaces:
            "{{ name }}":
              service_policies:
              - name: "{{ service_policy_name }}"
                direction: "{{ service_policy_direction }}"
      - regex: '^\s*load-interval (\d+)'
        examples:
        -  ' load-interval 30'
        captures:
        - load_interval
        path:
          interfaces:
            "{{ name }}":
              load_interval: "{{ load_interval }}"
      - regex: '^\s*no cdp enable'
        examples:
        -  ' no cdp enable'
        path:
          interfaces:
            "{{ name }}":
              cdp:
                enabled: false
      - regex: '^\s*no keepalive'
        examples:
        -  ' no keepalive'
        path:
          interfaces:
            "{{ name }}":
              keepalive:
                negate: true
      - regex: '^\s*service-module ip default-gateway (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        examples:
        -  ' service-module ip default-gateway 10.69.27.45'
        captures:
        - service_module_default_gateway
        path:
          interfaces:
            "{{ name }}":
              service_module:
                ip:
                  default_gateway:
                    ipv4_address: "{{ service_module_default_gateway }}"
      - regex: '^\s*service-module ip address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        examples:
        -  ' service-module ip address 10.69.27.46 255.255.255.252'
        captures:
        - service_module_ipv4_address
        - service_module_ipv4_netmask
        path:
          interfaces:
            "{{ name }}":
              service_module:
                ip:
                  address:
                    ipv4_address: "{{ service_module_ipv4_address }}"
                    ipv4_netmask: "{{ service_module_ipv4_netmask }}"
      - regex: '^\s*standby version (\d)$'
        examples:
          - ' standby version 2'
        captures:
          - version
        path:
          interfaces:
            "{{ name }}":
              standby:
                version: "{{ version }}"
      - regex: '^\s*standby (\d{1,4}) preempt delay minimum (\d+)$'
        examples:
          - 'standby 1295 preempt delay minimum 120'
        captures:
          - group
          - delay
        path:
          interfaces:
            "{{ name }}":
              standby:
                group: "{{ group }}"
                preempt: True
                delay: "{{ delay }}"
      - regex: '^\s*standby (\d+) ip (.+)$'
        examples:
          - ' standby 0 ip 10.20.30.40'
        captures:
          - group
          - ip
        path:
          interfaces:
            "{{ name }}":
              standby:
                group: "{{ group }}"
                ip: "{{ ip }}"
      - regex: '^\s*standby \d+ priority (\d+)$'
        examples:
          - ' standby 1 priority 123'
        captures:
          - priority
        path:
          interfaces:
            "{{ name }}":
              standby:
                priority: "{{ priority }}"
      - regex: '^\s*arp timeout (\d+)$'
        examples:
          - ' arp timeout 480'
        captures:
          - arp_timeout
        path:
          interfaces:
            "{{ name }}":
              arp_timeout: "{{ arp_timeout }}"
      - regex: '^\s*hold-queue (\d+) (in|out)$'
        examples:
          - ' hold-queue 2000 in'
          - ' hold-queue 2345 out'
        captures:
          - queue
          - direction
        path:
          interfaces:
            "{{ name }}":
              hold_queue:
                "{{ direction }}":
                  queue: "{{ queue }}"
      - regex: '^\s* ip pim (.*)$'
        examples:
          -  ' ip pim sparse-dense-mode'
        captures:
          - pim_mode
        path:
          interfaces:
            "{{ name }}":
              ip:
                pim:
                  mode: "{{ pim_mode }}"
      - regex: '^\s*no ip mroute-cache'
        examples:
          - ' no ip mroute-cache'
        path:
          interfaces:
            "{{ name }}":
              ip:
                mroute:
                  cache:
                    negate: true
      - regex: '^ mtu (\d{1,4})$'
        examples:
          - ' mtu 1500'
        captures:
          - mtu
        path:
          interfaces:
            "{{ name }}":
              mtu: "{{ mtu }}"